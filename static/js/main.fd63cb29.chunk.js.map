{"version":3,"sources":["components/table/Table.tsx","App.tsx","api/codegeckoApi.ts","reportWebVitals.ts","index.tsx"],"names":["Table","columns","data","useTable","useGlobalFilter","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setGlobalFilter","type","placeholder","onChange","e","target","value","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","App","config","useState","query","setQuery","useMemo","accessor","Cell","height","src","alt","Header","disableSortBy","useQuery","enabled","staleTime","queryKey","queryFn","a","axios","get","queriedData","isFetching","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","StrictMode","client","document","getElementById"],"mappings":"kTAmDeA,EA3CD,YAAmE,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,KACtC,EAA8FC,mBAC5F,CACEF,UACAC,QAEFE,kBACAC,aANMC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WAAYC,EAA1E,EAA0EA,gBAS1E,OACE,qCACE,uBAAOC,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAOJ,EAAgBI,EAAEC,OAAOC,OAAS,OAC9F,gDAAOC,UAAU,iBAAoBZ,KAArC,cACE,gCACGE,EAAaW,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,+CAAQA,EAAOC,eAAeD,EAAOE,yBAArC,cACGF,EAAOG,OAAO,UACf,+BAAOH,EAAOI,SAAYJ,EAAOK,aAAe,gBAAQ,gBAAS,oBAM3E,iDAAWrB,KAAX,aACGE,EAAKU,KAAI,SAACU,EAAKC,GAEd,OADApB,EAAWmB,GAET,8CAAQA,EAAIE,eAAZ,aACGF,EAAIG,MAAMb,KAAI,SAACc,GAAD,OACb,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKP,OAAO,+BCc7CS,MA/Cf,WACE,IC+BuBC,ED/BvB,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMtC,EAA6BuC,mBAAQ,WACzC,MAAO,CACL,CACEC,SAAU,QACVC,KAAM,gBAAGzB,EAAH,EAAGA,MAAH,OAAmC,qBAAK0B,OAAQ,GAAIC,IAAK3B,EAAO4B,IAAI,UAC1EC,OAAQ,QACRC,eAAe,GAEjB,CACEN,SAAU,SACVK,OAAQ,UAEV,CACEL,SAAU,OACVK,OAAQ,QAEV,CACEL,SAAU,aACVK,OAAQ,cAEV,CACEL,SAAU,gBACVK,OAAQ,0BAGX,IAKH,EAA+CE,oBCDxBZ,EDC0C,CAAEa,QAASX,EAAOY,UAFtD,KCCP,aACtBC,SAFkB,WAGlBC,QAAQ,WAAD,4BAAE,8BAAAC,EAAA,sEACgBC,IAAMC,IAC3B,4HAFK,uBACCrD,EADD,EACCA,KADD,kBAIAA,GAJA,2CAAF,kDAAC,IAMLkC,KDPH,IAAQlC,KAAMsD,OAAd,MAA4B,GAA5B,EAAgCC,EAAhC,EAAgCA,WAEhC,OACE,qBAAKvC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,wBAAQA,UAAU,eAAewC,SAAUD,EAAYE,QAAS,kBAAMpB,GAAS,IAA/E,SACGkB,EAAa,qBAAKvC,UAAU,kBAAqB,cAEpD,cAAC,EAAD,CAAgBjB,QAASA,EAASC,KAAMsD,UElCjCI,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCFRQ,EAAc,IAAIC,cACxBC,IAAS7C,OACP,eAAC,IAAM8C,WAAP,WACE,cAAC,sBAAD,CAAqBC,OAAQJ,EAA7B,SACE,cAAC,EAAD,MAFJ,OAMAK,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.fd63cb29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Column, TableOptions, useGlobalFilter, useSortBy, useTable } from 'react-table';\r\nimport './Table.css';\r\n\r\ninterface IProps<T extends {}> {\r\n  columns: Column<T>[];\r\n}\r\n\r\nconst Table = <T extends {}>({ columns, data }: IProps<T> & TableOptions<T>) => {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setGlobalFilter } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <input type=\"text\" placeholder=\"Search...\" onChange={(e) => setGlobalFilter(e.target.value || '')} />\r\n      <table className=\"table-element\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                  {column.render('Header')}\r\n                  <span>{column.isSorted ? (column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼') : ''}</span>\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => (\r\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useMemo, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { CellProps, Column } from 'react-table';\nimport { CoinDTO, getCoins } from './api/codegeckoApi';\nimport './App.css';\nimport Table from './components/table/Table';\n\nfunction App() {\n  const [query, setQuery] = useState(false);\n\n  const columns: Column<CoinDTO>[] = useMemo(() => {\n    return [\n      {\n        accessor: 'image',\n        Cell: ({ value }: CellProps<CoinDTO>) => <img height={50} src={value} alt=\"coin\" />,\n        Header: 'Image',\n        disableSortBy: true,\n      },\n      {\n        accessor: 'symbol',\n        Header: 'Symbol',\n      },\n      {\n        accessor: 'name',\n        Header: 'Name',\n      },\n      {\n        accessor: 'market_cap',\n        Header: 'Market Cap',\n      },\n      {\n        accessor: 'current_price',\n        Header: 'Current Price (AUD)',\n      },\n    ];\n  }, []);\n\n  // 5 minutes\n  const fiveMinutesStaleTime = 300000;\n\n  const { data: queriedData = [], isFetching } = useQuery(getCoins({ enabled: query, staleTime: fiveMinutesStaleTime }));\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <button className=\"fetch-button\" disabled={isFetching} onClick={() => setQuery(true)}>\n          {isFetching ? <div className=\"lds-dual-ring\" /> : 'Get Coins'}\n        </button>\n        <Table<CoinDTO> columns={columns} data={queriedData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\r\nimport { UseQueryOptions } from 'react-query';\r\n\r\nexport interface CoinDTO {\r\n  id: string;\r\n  symbol: string;\r\n  name: string;\r\n  image: string;\r\n  current_price: number;\r\n  market_cap: number;\r\n  market_cap_rank: number;\r\n  fully_diluted_valuation: number;\r\n  total_volume: number;\r\n  high_24h: number;\r\n  low_24h: number;\r\n  price_change_24h: number;\r\n  price_change_percentage_24h: number;\r\n  market_cap_change_24h: number;\r\n  market_cap_change_percentage_24h: number;\r\n  circulating_supply: number;\r\n  total_supply: number;\r\n  max_supply: number;\r\n  ath: number;\r\n  ath_change_percentage: number;\r\n  ath_date: string;\r\n  atl: number;\r\n  atl_change_percentage: number;\r\n  atl_date: string;\r\n  roi: IRoiDTO | null;\r\n  last_updated: string;\r\n}\r\n\r\ninterface IRoiDTO {\r\n  times: number;\r\n  currency: string;\r\n  percentage: number;\r\n}\r\n\r\nconst GetCoinsKey = 'GetCoins';\r\nexport const getCoins = (config?: UseQueryOptions<CoinDTO[]>) => ({\r\n  queryKey: GetCoinsKey,\r\n  queryFn: async () => {\r\n    const { data } = await axios.get<CoinDTO[]>(\r\n      'https://api.coingecko.com/api/v3/coins/markets?vs_currency=aud&order=market_cap_desc&per_page=100&page=1&sparkline=false'\r\n    );\r\n    return data;\r\n  },\r\n  ...config,\r\n});\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst queryClient = new QueryClient();\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n    ,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}